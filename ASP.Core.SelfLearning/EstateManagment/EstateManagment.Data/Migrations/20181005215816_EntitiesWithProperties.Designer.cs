// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace EstateManagment.Data.Migrations
{
    [DbContext(typeof(EstateManagmentContext))]
    [Migration("20181005215816_EntitiesWithProperties")]
    partial class EntitiesWithProperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EstateManagment.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountableName");

                    b.Property<string>("Address");

                    b.Property<string>("Bulstat");

                    b.Property<string>("ContactName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.ClientRent", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("RentAgreementId");

                    b.HasKey("ClientId", "RentAgreementId");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("ClientRents");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountablePerson");

                    b.Property<string>("Address");

                    b.Property<string>("Bulstat");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RentAgreementId");

                    b.Property<byte[]>("ScannedContract");

                    b.Property<DateTime>("UploadData");

                    b.HasKey("Id");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.MonthlyPaymentConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DeadLine");

                    b.Property<int?>("ElectricityDay");

                    b.Property<int?>("ElectricityNight");

                    b.Property<int?>("ElectricityPeak");

                    b.Property<decimal>("ElectricityPrice");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int?>("RentAgreementId");

                    b.Property<string>("UserId");

                    b.Property<decimal>("WaterPrice");

                    b.Property<int?>("WaterReport");

                    b.HasKey("Id");

                    b.HasIndex("RentAgreementId");

                    b.HasIndex("UserId");

                    b.ToTable("MonthlyPaymentConsumables");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.MonthlyPaymentRent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DeadLine");

                    b.Property<bool>("IsPaid");

                    b.Property<decimal>("MonthlyPayment");

                    b.Property<int?>("RentAgreementId");

                    b.HasKey("Id");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("MonthlyPaymentRents");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.ParkingSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<decimal>("Price");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ParkingSlots");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.ParkingSlotRent", b =>
                {
                    b.Property<int>("ParkingSlotId");

                    b.Property<int>("RentAgreementId");

                    b.HasKey("ParkingSlotId", "RentAgreementId");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("ParkingSlotRents");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int?>("MonthlyPaymentRentId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyPaymentRentId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Area");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.PropertyRent", b =>
                {
                    b.Property<int>("PropertyId");

                    b.Property<int>("RentAgreementId");

                    b.Property<decimal>("MonthlyPrice");

                    b.HasKey("PropertyId", "RentAgreementId");

                    b.HasIndex("RentAgreementId");

                    b.ToTable("PropertyRents");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.RentAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("ParkingSlotDescription");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("RentAgreements");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nickname");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.ClientRent", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.Client", "Client")
                        .WithMany("ClientRents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateManagment.Data.Models.RentAgreement", "RentAgreement")
                        .WithMany("ClientRents")
                        .HasForeignKey("RentAgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Contract", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.RentAgreement")
                        .WithMany("Contracts")
                        .HasForeignKey("RentAgreementId");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.MonthlyPaymentConsumable", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.RentAgreement")
                        .WithMany("MonthlyConsumables")
                        .HasForeignKey("RentAgreementId");

                    b.HasOne("EstateManagment.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.MonthlyPaymentRent", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.RentAgreement")
                        .WithMany("MonthlyRents")
                        .HasForeignKey("RentAgreementId");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.ParkingSlot", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.Company", "Company")
                        .WithMany("ParkingSlots")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EstateManagment.Data.Models.ParkingSlotRent", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.ParkingSlot", "ParkingSlot")
                        .WithMany("ParkingSlotRents")
                        .HasForeignKey("ParkingSlotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateManagment.Data.Models.RentAgreement", "RentAgreement")
                        .WithMany("ParkingSlotRents")
                        .HasForeignKey("RentAgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Payment", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.MonthlyPaymentRent")
                        .WithMany("Payments")
                        .HasForeignKey("MonthlyPaymentRentId");

                    b.HasOne("EstateManagment.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EstateManagment.Data.Models.Property", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.Company", "Company")
                        .WithMany("Properties")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EstateManagment.Data.Models.PropertyRent", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.Property", "Property")
                        .WithMany("PropertyRents")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateManagment.Data.Models.RentAgreement", "RentAgreement")
                        .WithMany("PropertyRents")
                        .HasForeignKey("RentAgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateManagment.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EstateManagment.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
